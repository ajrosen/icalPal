#!/usr/bin/env ruby

begin
  require 'logger'

  require 'csv'
  require 'json'
  require 'rdoc'
  require 'sqlite3'
  require 'yaml'

  require_relative '../lib/icalPal'
  require_relative '../lib/options'
rescue LoadError => e
  dep = e.message[/-- (.*)/, 1]

  $stderr.puts "FATAL: icalPal is missing a dependency: #{dep}"
  $stderr.puts
  $stderr.puts "Install with 'gem install --user-install #{dep}'"

  exit
end


##################################################
# Load options

# All kids love log!
$log = Logger.new(STDERR, { level: $defaults[:common][:debug] })
$log.formatter = proc do |s, t, p, m| # Severity, time, progname, msg
  ($log.level.positive?)? "#{s}: #{m}\n" :
    "[%-5s] %s [%s] - %s\n" %
    [ s, t.strftime('%H:%M:%S.%L'), caller(4, 1)[0].split('/')[-1], m ]
end

$opts = ICalPal::Options.new.parse_options

$rows = []                      # Rows from the database
$items = []                     # Items to be printed


##################################################
# All kids love log!

$log.info("Options: #{$opts}")


##################################################
# Add an item to the list
#
# @param item[Object]

def add(item)
  $log.info("Adding #{item.inspect} #{item['UUID']} (#{item['title']})") if item['UUID']

  item['sday'] = ICalPal::RDT.new(*item['sdate'].to_a[0..2]) if item === ICalPal::Event && item['sdate']
  $items.push(item)
end


##################################################
# Load the data

# What are we getting?
klass = ICalPal::($opts[:cmd])

# Get it
if klass == ICalPal::Reminder then
  # Load all .sqlite files
  Dir.glob("#{$opts[:db]}/*.sqlite").each { |db| $rows += ICalPal.load_data(db, klass::QUERY) }
else
  # Load database
  $rows += ICalPal.load_data($opts[:db], klass::QUERY)
end

$log.info("Loaded #{$rows.count} #{klass} rows")


##################################################
# Process the data

# Add rows
$rows.each_with_index do |row, i|
  $log.debug("Row #{i}: #{row['ROWID']}:#{row['UUID']} - #{row['account']}/#{row['calendar']}/#{row['title']}")

  # --es/--is
  if $opts[:es].any? row['account'] then
    $log.debug(":es")
    next
  end

  unless $opts[:is].empty? or $opts[:is].any? row['account']
    $log.debug(":is");
    next
  end

  # --ec/--ic
  if $opts[:ec].any? row['calendar'] then
    $log.debug(":ec")
    next
  end

  unless $opts[:ic].empty? or $opts[:ic].any? row['calendar']
    $log.debug(":ic")
    next
  end

  # Instantiate an item
  item = klass.new(row)

  # --et/--it
  if $opts[:et].any? item['type'] then
    $log.debug(":et")
    next
  end

  unless $opts[:it].empty? or $opts[:it].any? item['type']
    $log.debug(":it")
    next
  end

  # --el/--il
  if $opts[:el].any? item['list_name'] then
    $log.debug(":el")
    next
  end

  unless $opts[:il].empty? or $opts[:il].any? item['list_name']
    $log.debug(":il")
    next
  end

  if ICalPal::Event === item
    # Check for all-day and cancelled events
    if $opts[:ea] && item['all_day'].positive? then
      $log.debug(":ea")
      next
    end

    if $opts[:ia] && !item['all_day'].positive? then
      $log.debug(":ia")
      next
    end

    if item['status'] == :canceled then
      $log.debug(":canceled")
      next
    end

    (item['has_recurrences'].positive?)?
      item.recurring.each { |i| add(i) } :
      item.non_recurring.each { |i| add(i) }
  else
    # Check for dated reminders
    if ICalPal::Reminder === item then
      if $opts[:dated] == 1 and item['due_date'] > 0 then
        $log.debug(":undated")
        next
      end

      if $opts[:dated] == 2 and item['due_date'] == 0 then
        $log.debug(":dated")
        next
      end
    end

    add(item)
  end
end

# Add placeholders for empty days
if $opts[:sed] && $opts[:sd] && klass == ICalPal::Event
  days = $items.collect { |i| i['sday'] }.uniq.sort

  $opts[:days].times do |n|
    day = $opts[:from] + n
    $items.push(klass.new(day)) unless days.any? { |i| i.to_s == day.to_s }
  end
end

# Sort the rows
begin
  $log.info("Sorting/uniqing #{$items.count} items by #{[ $opts[:sep], $opts[:sort], 'sdate' ]}, reverse #{$opts[:reverse].inspect}")

  $items.sort_by! { |i| [ i[$opts[:sep]], i[$opts[:sort]], i['sdate'] ] }
  $items.reverse! if $opts[:reverse]
  $items.uniq!
rescue Exception => e
  $log.info("Sorting failed: #{e}\n")
end

$log.debug("#{$items.count} items remain")

# Configure formatting
mu = case $opts[:output]
     when 'ansi' then RDoc::Markup::ToAnsi.new
     when 'default' then RDoc::Markup::ToICalPal.new($opts)
     when 'html' then
       rdoc = RDoc::Options.new
       rdoc.pipe = true
       rdoc.output_decoration = false
       RDoc::Markup::ToHtml.new(rdoc)
     when 'md' then RDoc::Markup::ToMarkdown.new
     when 'rdoc' then RDoc::Markup::ToRdoc.new
     when 'toc' then RDoc::Markup::ToTableOfContents.new
     end


##################################################
# Print the data

items = $items[0..$opts[:li] - 1]

unless mu
  $log.debug("Output in #{$opts[:output]} format")

  puts case $opts[:output]
       when 'csv' then
         # Get all headers
         headers = []
         items.each { |i| headers += i.keys }
         headers.uniq!

         # Populate a CSV::Table
         table = CSV::Table.new([], headers: headers)
         items.each { |i| table << i.to_csv(headers) }

         table
       when 'hash' then items.map { |i| i.self }
       when 'json' then items.map { |i| i.self }.to_json
       when 'xml' then
         xml = items.map { |i| "<#{$opts[:cmd].chomp("s")}>#{i.to_xml}</#{$opts[:cmd].chomp("s")}>" }
         "<#{$opts[:cmd]}>\n#{xml.join("")}</#{$opts[:cmd]}>"
       when 'yaml' then items.map { |i| i.self }.to_yaml
       when 'remind' then items.map { |i|
                            "REM #{i['sdate'].strftime('%F AT %R')} " +
                              "DURATION #{((i['edate'] - i['sdate']).to_f * 1440).to_i } " +
                              "MSG #{i['title']}"
                          }.join("\n")
       else abort "No formatter for #{$opts[:output]}"
       end

  exit
end

$log.debug("Formatting with #{mu.inspect}")

doc = RDoc::Markup::Document.new
section = nil

items.each_with_index do |i, j|
  $log.debug("Print #{j}: #{i.inspect}")

  # --li
  break if $opts[:li].positive? && j >= $opts[:li]

  # Use RDoc::Markup::Verbatim to save the item
  v = RDoc::Markup::Verbatim.new
  v.format = i
  doc << v

  # Sections
  if $opts[:sep] && section != i[$opts[:sep]]
    $log.debug("New section '#{$opts[:sep]}': #{i[$opts[:sep]]}")

    doc << RDoc::Markup::Raw.new($opts[:sep])

    doc << RDoc::Markup::BlankLine.new if j.positive?
    doc << RDoc::Markup::Heading.new(1, i[$opts[:sep]].to_s)
    doc << RDoc::Markup::Rule.new(0)

    section = i[$opts[:sep]]
  end

  # Item
  props = RDoc::Markup::List.new(:BULLET)

  # Properties
  $opts[:props].each_with_index do |prop, k|
    value = i[prop]

    next unless value
    next if Array === value && !value[0]
    next if String === value && value.length == 0

    $log.debug("#{prop}: #{value}")

    # Use Raw to save the property
    props << RDoc::Markup::Raw.new(prop)

    unless k.positive?
      # First property, value only
      props << RDoc::Markup::Heading.new(2, value.to_s)
    else
      props << RDoc::Markup::BlankLine.new unless (i['placeholder'] || $opts[:ps])
      props << RDoc::Markup::ListItem.new(prop, RDoc::Markup::Paragraph.new(value)) unless(i['placeholder'])
    end
  end

  # Print it
  props << RDoc::Markup::BlankLine.new unless props.empty?

  doc << props
end

print doc.accept(mu)
